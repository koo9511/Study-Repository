<연산자_제어문_요약>

* 제어(처리)문
  : 프로그램의 실행 흐름을 제어하는 문장
 - 조건문 : 조건을 제시해서 그 결과에 따라 실행할 문장을 선택하는 경우
	=> if문, switch문
	=> 조건처리를 위해서 비교연산자, 논리연산자가 주로 사용됨
	=> if문 --------------------------------------------------------------
	1. if만 사용하는 경우
	  : 조건을 만족하는 경우에만 실행하고, 
	    조건을 만족하지 않은 경우에는 실행할 내용이 없음.

		if(조건식)	//조건식에 비교,논리 연산자 사용됨
		{
		  조건식의 결과가 참(true)일때 
		  실행시킬 문장
		}
	=> 예를 들어, 양수일 때만 처리할 경우
		if(변수 > 0)	//양수냐?
		{
		  양수일 때만 처리할 문장
		}
	** 조건식은 반드시 결과가 참(true)/거짓(false)가 나오게끔
	   작성해야 함 **
	=> 조건식의 예
	* 짝수냐?	---> if(변수 % 2 == 0)
	* 홀수냐? ---> if(변수 % 2 == 1)
		    if(!(변수 % 2 == 0))	//짝수가 아니냐?
		    if(변수 % 2 != 0)
	* 3의 배수냐? ---> if(변수 % 3 == 0)
	* 값의 범위를 물을 때
		---> 1부터 100사이의 값이냐?
		if(변수 >= 1 && 변수 <= 100)
		---> 대문자냐?
		if(문자변수 >= 'A' && 문자변수 <= 'Z')
		if(문자변수 >= 65 && 문자변수 <= 91)

	2. if ~ else문
	if(조건식)
	{
	  결과가 참일 때 처리할 내용
	}else{
	  위의 조건식의 결과가 거짓일 때 처리할 내용
	}

	3. 다중 if문
	if(조건식1)
	{
	  조건식1이 참일 때 처리할 내용
	}else if(조건식2)	//조건식1이 거짓이고, 조건식2가 참이면
	{
	  조건식1이 거짓이고, 조건식2가 참일 때 처리할 내용
	}else if(조건식3)
	{
	  조건식1과 조건식2가 거짓이고, 조건식3이 참일때
	  처리할 내용
	}else{
	  위의 제시된 조건이 모두 다 거짓일 때 처리할 내용
	}

*** if {} else {}은 처리할 내용이 문장 한 개일 때 생략할 수도 있음 ***

	=> switch 문 ---------------------------------------------------------
	  : 선택문임.
	switch(판단기준)	//판단기준 : 계산식이나 변수 사용
				값이 뭐냐?
			** 조건식 사용 못 함
	{	//{}은 생략할 수 없음
	case 값:	실행할 내용;	break;
	//case 문이 값을 제시하는 문장임.
	//제시한 값이 맞으면, 오른쪽 뒤로 넘어가서 실행내용이 작동됨
	//제시한 값이 아니면, 아래로 진행함 --> 다음 case 로 넘어감
	case 값:	실행할 내용;	break;
	//case 가 제시하는 값은 jdk 6 까지는 양의정수 또는 문자상수만
	//제시할 수 있었음
	//jdk 7부터 문자열값도 제시할 수 있게됨.....
	case 값:	실행할 내용;	break;
	.......
	.......
	default:	실행할 내용;	break;
	//위에 제시된 모든 값이 아닐 때, 처리할 내용을 작동됨.
	//default문은 생략해도 됨
	}
	
	=> case 에서 제시된 값이 맞을 경우, 준비된 내용을 실행하고
	   끝내지 못하는 문제가 있음. : fall through 현상 발생함
	   아래쪽 있는 다른 case 가 실행할 내용까지 다 실행하게 됨.
	=> 해당 case 에 실행만 수행하고 끝내기 위해서
	   break문을 빌려 씀 : break(강제 종료하는 문장임)

	*** switch 문은 모두 다 if문으로 변환 가능함
	    if문은 switch문으로 모두 변환 못 함 ***

	*** jdk 1.6 까지는 case 에 사용할 수 있는 값은
	   양의 정수 또는 문자상수 만 사용할 수 있었음.
	*** jdk 1.7 서 부터는 문자열 값도 사용할 수 있음...


* 제어문
 - 반복(LOOP)문
   => LOOP : 소스 상의 반복 실행되는 구간
   => 	for문 : 반복할 횟수가 정해져 있을 때, 
		배열 데이터 처리에 주로 사용
		반복여부를 결정하는 조건식이 앞에 제시가 됨
		만약, 반복 조건식이 결과가 처음부터 거짓이면
		한번도 실행이 안됨
	while문 : 반복할 횟수가 정해져 있지 않을 때
		반복여부를 결정하는 조건식이 앞에 제시가 됨
		만약, 반복 조건식이 결과가 처음부터 거짓이면
		한번도 실행이 안됨
	do~while문 : 반복할 횟수가 정해져 있지 않은 반복에 주로 사용
		반복에 대한 조건식이 맨 뒤에 제시됨
		일단 한번 실행하고 나서 반복을 결정하게 됨

** for문 --------------------------------------------------------------
	for(초기식; 조건식; 증감식)
	{
	  반복 수행할 구문
	}
	- 초기식 : 반복 횟수의 시작값 지정
		int k;
		for(k = 1;  )
		또는
		int k = 1;
		for( 초기식 생략가능함  ;  )
		또는
		for(int k = 1;  )
		//이 k변수는 for문에서만 사용 가능한 지역변수가 됨
		//해당 for문이 끝나면 k변수도 메모리에서 삭제됨
	- 조건식 : 반복의 종료값을 제시함
		반복의 조건식이 참일 동안 반복이 수행됨.
		조건식이 거짓이 되면 반복은 종료됨.
		int k;
		for(k = 1; k <= 10;  )
		또는
		int k;
		for(k = 1; k < 11;  )
	- 증감식 : 반복 횟수를 결정함
		int k;
		for(k = 1; k < 11; k++){}	//10번 반복됨
		int k;
		for(k = 1; k < 11; k+=2){}	//5번 반복됨
		int k;
		for(k = 10; k > 0; k--){}	//10번 반복됨
		int k;
		for(k = 10; k < 101; k+=10)//10번 반복됨

	ex> 1부터 100까지 정수들의 합계를 구할 경우
	int sum = 0, k;
	for(k = 1; k < 101; k++)
	{//반복할 문장이 하나일 때는 {} 생략해도 됨.	
	   sum += k;
	}

	for(k = 1; k < 101; k++)
		sum += k;


** while 문
	while(반복에 대한 조건식)
	{ 반복시킬 내용 }
	=> for( ; 조건식; )
	   { 반복시킬 내용  }
	=> while(true)	//do~while과 같은 구조임.
	   {
		반복할 내용
		if(종료조건)  break;
	   }


	=> 만약, while문을 for문처럼 횟수를 카운트하면서 작동되게 하려면
	int k = 1;	//초기식
	while(k < 101)	//조건식
	{
	   sum += k;	//반복시킬 내용
	   k++;		//증감식
	}

** do ~ while문
	do{
	  반복시킬 내용
	}while(반복에 대한 조건식);

//======================================================
* 분기문
 : 프로그램은 기본적으로 위에서 아래로 실행되는 구조임.
 - 실행의 흐름을 바꾸는 문장
 - 실행을 건너 뛰거나(중간 생략), 강제 종료시킬 때
 - 반드시 if문과 함께 사용함
 - goto문
	위치이름:

	if(조건식) 
	  goto 위치이름;

 - break, continue는 반복문 내에서만 사용할 수 있음
	단, switch문에서 예외로 사용됨
   break문
	if(조건식)	break;	//해당 반복구간을 강제 종료하라.
   continue문
	if(조건식)	continue;	//아래 내용을 실행하지 말고, 증감식으로 가라.

//-------------------------------------------------------------------------------------
* 단순 for문 : for 한 번 사용
* 다중 for문 : for 문 안에 for문 사용하는 경우
	=> 이중 for문일 경우 : 2차원배열 처리에 주로 사용됨
	for(.......)
	{
		for(........)
		{
		  반복 실행할 내용
		}
	}

















