< 제네릭스(Generics) >
 => jdk 1.5 서부터 제공됨
=> 컬렉션 클래스가 여러 종류의 객체를 저장할 수 있음.
    그러나, 가진 객체들을 꺼내서 사용하려고 할 때, 객체의 종류에
   맞춰 매번 형변환을 해야 데이터에 접근할 수 있음.
   코드가 복잡해 짐.
=> 컬렉션 클래스를 이용해서 객체를 저장할 때, 저장할 객체 곧
   클래스타입을 제한하는 기능
    *  한가지 종류의 클래스만 저장하게 됨.
=> 사용방법
	* 컬렉션 레퍼런스 선언, 생성, 매개변수, 반환형 
	  모두 적용됨.
	예)
	클래스명<사용할 클래스타입> 레퍼런스 = new 
			생성자<클래스타입>();

	ArrayList<Book> list = new ArrayList<Book>();

	레퍼런스.메소드(list);	//제네릭스가 설정된 레퍼런스를
			//메소드쪽으로 넘길 경우
	=> ... 메소드명(ArrayList<Book> l)
		//메소드 쪽에서 받아주는 매개변수도
		//같이 제네릭스가 적용이 되어야 함.

	return list;	//제네릭스가 적용된 레퍼런스가
			//리턴된다면,
	=> 해당 메소드의 반환형에도 제네릭스가 적용되어야 함
	public ArrayList<Book> 메소드명()
	{ 
		ArrayList<Book> list = new ArrayList<Book>();
		.......
		return list;
	}

=> 제네릭스 클래스 만들기
	class 클래스<영문자>
	{
		영문자 레퍼런스;
	}
	* 영문자 : 일반적으로 대문자 사용함
	              클래스 타입이 미정이라는 뜻임.
		객체 생성시 정해지는 클래스 타입을
		영문자가 받아서, 영문자 사용 위치에
		적용함.


*** for each 문 ***
	=> jdk 1.5 서 부터 제공됨
	=> 향상된 for 문
	   for(Object 레퍼런스 : 배열명  또는 컬렉션레퍼런스명)
	   {
		Object 를 해당 클래스타입으로 형변환하고 사용
		반복실행할 내용
	   }

	=> 컬렉션클래스에 제네릭스가 사용이 되었다면,
	for(클래스타입 레퍼런스 : 제네릭스가 적용된 컬렉션)









