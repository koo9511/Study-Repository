[자바에서 클래스와 메소드 사용법]

* 클래스 작성법
 - public class 클래스명{}	//공개하는 클래스 : 다른 패키지에서 사용 가능함
 - class 클래스명{}	//디폴트(default) 클래스 : 다른 패키지에서 사용 못 함
	** public : 현재 클래스가 속한 패키지 밖에 공개한다는 의미임
	** default(package private) : 패키지 안에서만 사용 가능하다는 의미임

* 클래스 사용법
 - 같은 패키지 안에 있는 클래스 끼리는 그냥 import 하지 않고 사용하면 됨
	: public class, default class 둘 다 해당됨
 - 다른 패키지에 있는 클래스가 사용하려면, import 선언하면 됨
	: 단, public class 만 가능함.

 - 다른 클래스에서 클래스 사용법
	: 클래스를 자료형으로 사용함
	* 자료형은 기본자료형(Primitive Type)과 클래스자료형(Reference Type)
	  두 종류로 구분됨.
	* 결국 변수가 두 종류로 구분됨
	 기본자료형 변수명;  => 기본자료형 변수방에는 값이 기록됨
		변수명 = 값;
	 클래스명 변수명;	=> 레퍼런스(참조) 변수라고 함
		레퍼런스변수명 = new 클래스명();
		//new 연산자 : 동적메모리의 힙(heap)영역에 변수방 만드는
			연산자임.
			=> 힙 메모리에 할당된 클래스에 대한 공간의 주소를
			레퍼런스변수가 가지게 됨
		** 클래스에 대한 공간은 반드시 힙 메모리에 만들어라...
			=> 자바가 정함.

* 다른 클래스가 가지고 있는 메소드(멤버함수)를 사용하는 방법
 	: 메소드도 두 종류로 구분됨
 - static 메소드
	public static 자료형 메소드명([자료형 변수명]){}
	=> 클래스명.메소드명([값]);
 - non-static 메소드
	public 자료형 메소드명([자료형 변수명]){}
	=> 클래스명 레퍼런스변수 = new 클래스명();
	   레퍼런스변수.메소드명([값]);

* 메소드 사용법
	: 메소드는 사용법에 따라 4가지로 구분됨
 - 매개변수가 없는 메소드
	** 매개변수(parameter) : 메소드 ()안에 선언된 변수
	public [static] 자료형 메소드명()
	** static 메소드 : 클래스명.메소드명();
	** non-static 메소드 : 레퍼런스변수.메소드명();

 - 매개변수가 있는 메소드
	public [static] 자료형 메소드명(자료형 변수명)
	** static 메소드 : 클래스명.메소드명(매개변수한테 줄 값);
	** 전달값(argument) : 메소드 실행시 메소드의 매개변수에게 전달되는 값
	** non-static 메소드 : 레퍼런스변수.메소드명(전달값);
	*** 메소드 사용시, 매개변수의 갯수와 매개변수의 자료형과 일치되게
		전달값을 주어야 함 ****

 - 반환값이 없는 메소드
	** 반환값(return value) : 리턴되는 값(돌려보내는 값)
		메소드가 기능을 수행한 후에 메소드 사용 위치로 돌려보내는 값
		처리한 결과값을 의미함
	=> 메소드를 실행하면, 메모리의 메소드 소스 위치로 가서 읽으면서 실행하고
	  호출 위치로 되돌아 옴...
	=> 메소드가 되돌아 올 때 빈 몸으로 돌아오는 경우

	public [static] void 메소드명([자료형 매개변수명])
	=> 메소드 이름 앞에 void 가 있는 경우
	=> void(무취형) : 반환값 없다. 라는 뜻임

	=> static void 메소드 : 클래스명.메소드([값]);
	=> non-static void 메소드 : 레퍼런스변수.메소드([값]);

 - 반환값이 있는 메소드
	: 메소드가 실행되고 나서, 되돌아 올 때 값을 한 개 가지고 돌아오는 메소드

	public [static] 자료형 메소드명([자료형 매개변수])
	=> 메소드이름 앞에는 되돌아 올 때 가지고 오는 값의 자료형을 써 줌

	=> static 메소드 : 자료형 변수 = 클래스명.메소드명([전달값]);
			*** 반환되는 값을 받아주는 변수를 메소드 앞에
			  대기 시켜야 함
	=> non-static 메소드 : 자료형 변수 = 레퍼런스변수.메소드([전달값]);
			*** 앞에 사용된 변수의 자료형은 반드시
			  반환값의 자료형과 일치해야 함 
	*** 다른 메소드 ()안에 값을 써야될 위치에 메소드를 대신 사용할 수 있음
	*** 제어문 () 안에도 사용 가능함









