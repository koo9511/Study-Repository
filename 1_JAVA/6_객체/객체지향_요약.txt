* 객체(Object) 지향(Oriented) 프로그래밍(Programming) : OOP
 => 객체를 사용해서 프로그램을 작성하는 것
 => 객체는 클래스에 의해 만들어짐
	* c++ : 클래스에 의해 만들어진 변수를 객체라 함
		클래스형 변수명;
	* JAVA : 힙 메모리에 할당된 클래스에 의한 기억공간을 객체라 함
		클래스에 의한 변수는 레퍼런스[변수]라고 함
		클래스형 레퍼런스 = new 클래스명();

* OOP의 3대 특징
	1. 캡슐화(EnCapsulation)
	=> 변수 -----> 배열 --------------------------> 구조체
	   값1개    같은자료형의 값 여러 개      자료형이 다른 변수들의
					   묶음

	=> 클래스(class) : 구조체 + 보안기능(접근에 제한을 설정)
	=> 캡슐화 : 클래스안의 멤버변수(Field)에 클래스 밖에서는
		   접근 못하게 하는 것(private)이 원칙임

	ex>
	class 클래스명{
		//Field
		private 자료형 변수명;
		(클래스 밖에서는 해당 필드에 절대 접근 못 함)

		*** 해당 필드에 값 처리를 목적으로 하는 함수(메소드)를
		클래스 안에 작성하게 됨 ***
		*** 메소드를 클래스 밖에서 사용하는 구조임
		*** 클래스 밖에서 사용할 메소드는 public 으로 처리함

		*** 메소드가 필드에 대한 처리 기능에 따라서
		=> 생성자함수(Constructor)
		   : 객체가 힙에 할당될 때 객체 안에 만들어지는
		     필드의 초기화를 담당함.
		     new 할 때 실행되는 함수임.
		     new 할 때 초기값을 생성자 쪽으로 전달하면 됨.
		     생성자함수가 전달된 초기값을 받아서, 필드에 기록함

		=> 메소드(Method)
		  * Getter 메소드 : 할당된 필드(인스턴스 변수라고 함)
			** instance == object
			** 인스턴스변수 == 객체 안에 있는 필드들
			--> 필드에 기록된 값을 읽어서 요구하는 쪽으로
			    읽은 값을 넘기는 메소드

		  * Setter 메소드
			---> 필드 값을 변경하는 메소드
			---> 바꿀 새 값을 전달받아서 해당 필드에 대입

		  * 일반 메소드
			---> 다른 용도를 처리하기 위한 메소드	

	}

	2. 상속(Inheritance)
	3. 다형성(Polymorphism)

//--------------------------------------------------------------------------------------
* 클래스 작성
 => [접근제한자] [예약어] class 클래스명{}
     public	final(종단, 끝), abstract(미완성된, 추상)
     default(생략됨)

	class 클래스명{}	//default 클래스라고 함
			//해당 패키지 안에 있는 클래스들 끼리만
			//import 없이 사용가능한 클래스임.
	public class 클래스명{}	//패키지 밖의 다른 클래스에서
			//사용하고자 할 경우, import하면 사용가능함
	public final class 클래스명{}	//종단 클래스라고 함
			//상속에 사용 못 하는 클래스를 의미함
			//클래스의 기능 확장을 막기 위해 사용됨
	public abstract class 클래스명{}	//추상 클래스라고 함
			//미완성된 클래스를 의미함
			//반드시 상속을 통해서 후손이 완성시켜야 됨.
			//객체 생성 못 하는 클래스임.

* 멤버변수 : Field 작성
 => [접근제한자] [예약어] 자료형 변수명 [ = 초기값];
    - private(원칙임)  final, static, final static(static final), variant
    ~ default(생략됨)  (수정불가능)      (정적메모리에 할당을 의미함)
    + public
    # protected

 => 접근제한자 : 접근에 제한을 거는 단어
	- private : 클래스 안에서만 접근 가능함
		  클래스 밖에서는 접근 불가능.
	~ default : package private(같은 패키지안)
		  같은 패키지 안에 있는 다른 클래스들이 접근 가능함.
		  다른 패키지의 있는 클래스는 접근 불가능
	+ public : 공개를 의미함
		 패키지 안, 밖 모든 클래스가 접근 가능함
	# protected : default와 같음
		 패키지 밖에 있는 클래스가 해당 멤버에 접근하려면
		 상속을 받은 후손만 접근 가능함.

 => 생성자(Constructor) 함수 작성
	* public 이 원칙임
	* private, protected 으로 할 수도 있음
		: 싱글톤(Single-ton) 디자인 패턴 적용시 사용함.
	
	public 클래스명(){}	//기본(default) 생성자라고 함
			//매개변수가 없는 생성자임.

	** 클래스에 생성자가 없는 경우에, 클래스 사용시에 자바가상머신이
	   자동으로 기본생성자를 하나 만들어서 실행함. **

	** 클래스가 상속에 사용되거나(부모클래스), 또는 매개변수가 있는
	   생성자를 만들 경우에는 반드시 기본생성자 작성해야 함 **


	--> 반환형 없음
	--> 함수명은 반드시 클래스명과 같아야 함
	--> 오버로딩(Overloading) 가능함
		: 같은 이름의 함수가 여러개 작성되는 경우
		- 반드시 매개변수를 다르게 구성해야 함

	//매개변수가 있는 생성자 중복작성 가능함
	--> 객체 생성시(할당시, new 할때) 원하는 초기값을 
	   인스턴스변수의 초기값으로 기록을 원할 때 사용됨.
	--> 생성시 초기값을 생성자를 통해서 전달하면,
	  	 클래스명 레퍼런스 = new 생성자(초기값, 초기값);
					  전달값(argument)
	--> 생성자의 준비된 매개변수가 받아서 필드에 대입함
		public 클래스명(자료형 변수명, 자료형 변수명)
		{		매개변수(parameter)
		  필드명 = 변수;
		  [this.]필드 = 변수;
		}

	** this 레퍼런스 : 생성자와 메소드 안에 무조건 존재함.
		--> 할당된 객체를 가리킴
		--> 함수 실행시 전달되는 객체의 주소를 자동으로 받음.
			레퍼런스.메소드명();

		--> this.필드명 : 전달받은 객체의 주소안의 필드를 말함.

* 일반 메소드(Method)
 => [접근제한자] [예약어] 반환자료형 메소드명([자료형 매개변수명, ......])
     public     static 
     default    final(상속시 오버라이딩 불가)
     protected  abstract(미완성된)
     private    synchronized(동기화처리)
		static final(final static)
    {   
	처리할 내용 작성
	return;    -----> void
	return 값;  ------> 값의 자료형
    }

* Setter : Set 메소드
	=> 객체 안의 필드(인스턴스변수)의 값 변경하는 메소드
	public void set필드명(자료형 매개변수명)
	{
	    this.필드 = 매개변수;
	}

* Getter : Get 메소드
	=> 필드에 기록된 값을 읽어서, 요구하는 쪽으로 넘기는 메소드
	=> 필드 값 조회용임.
	public 반환자료형 get필드명()
	{
	   return this.필드;
	}










