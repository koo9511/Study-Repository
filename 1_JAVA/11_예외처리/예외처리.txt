<예외 처리 : Exception Hendling>

 * 에러의 종류
	1. 컴파일 에러
	   : 소스 상의 문법 에러
	   => 에러난 소스 구문을 수정
	2. 런타임 에러
	   : 실행시 발생하는 에러
	   - 입력값이 틀렸거나, 배열의 인덱스 범위를 벗어났거나,
		계산식의 오류, 0으로 나누기 하거나
	   => 소스상에서 에러에 대한 처리를 해야 함
		if문 주로 사용
	3. 시스템 에러
	   : 컴퓨터 오작동으로 인한 에러
	   => 소스 구문으로는 해결 못 함.

 * 에러 해결 방법
	=> 소스로 해결 가능한 에러 == 예외(Exception) 라고 함
	=> 소스로 해결 못 하는 에러 == 에러(Error)

 * 예외 상황(예측 가능한 에러)을 구문을 처리하는 방법
	=> 예외 처리 라고 함.

 * 자바가 제공하는 클레스의 메소드 사용시, 
	사용할 메소드이 해드 뒷쪽에 throws XXXException 이 명시된
	경우, 그냥 사용시 에러 발생함.
	=> 해당 메소드 사용시 반드시 뒤에 명시된 예외클래스를 처리해야
	  사용이 가능함

 * 예외처리 방법
	1. 떠 넘기는 방법
	=> throws 사용

	접근제어자 반환자료형 메소드명([자료형 매개변수]) throws 처리할예외클래스명
	{
		...................
		예외를 처리해야 하는 구문 
		....................
	}

	=> 여러 단계로 떠 넘길 수 있음
	ex>
	public void testA() throws 처리할예외클래스명
	{
		testB();	//예외가 넘어옴
	}

	public void testB() throws 처리할예외클래스명
	{
		testC(); //메소드 호출 위치로 예외가 넘어옴
	}

	public void testC() throws 처리할예외클래스명
	{
		예외를 처리할 구문
	}


	2. 예외처리 구문을 사용해서 직접 처리하는 방법
	=> try ~ catch 구문 사용함.

	try{
		......................
		반드시 예외를 처리해야 하는 구문
		.....................
	}catch(처리할예외클래스명 레퍼런스)
	{
		잡은예외클래스에 대한 처리구문 작성함
	}


	*** finally{}
	  : 실행 도중 해당 익셉션이 발생하든, 안하든 반드시 실행해야 하는
	   구문은 finally 블럭에 작성하면 됨.
	  => try ~ catch 블럭 맨 마지막에 추가함.
		예>
		try{
			예외발생 구문
		}catch(에외클래스명 레퍼런스)
		{
			처리할 내용
		}catch(예외클래스명 레퍼런스)
		{
			......
		}finally{
			예외가 발생하든, 안하든 반드시 실행되어야
			하는 구문
		}

	*** catch 구문을 여러번 사용할 경우, 상속관계를 고려해서
		최하위 후손 예외클래스가 가장 먼저 위에 제시되어야 함
		=> 최상위 예외클래스가 가장 밑에(나중에) 제시되어야 함.
		=> 최상위 예외클래스가 가장 먼저 제시가 되면,
		   부모가 후손의 주소를 다 받게 되므로, 아래에 명시된
		   후손 예외클래스가 작동되지 못하기 때문임.


 * 예외클래스의 상속관계
   Object - Throwable - Error
		    - Exception - RuntimeException 후손들
			       - 예외클래스 후손들

	* 자바에서는 사용 가능한 예외클래스의 최상위는 
	   Exception 클래스임.

 => 예외클래스는 두 부류로 나눠짐
	- checked exception
	   : 소스 코드상에서 반드시 개발자가 처리해야 되는 예외클래스들
	   => RuntimeException 이 아닌 예외클래스들
	- unchecked exception
	   : 개발자가 소스 코드상에서 다룰 필요가 없는 예외클래스들
	   => RuntimeException과 후손클래스들


*** 사용자 정의 예외클래스 작성법 ***
	=> Exception 클래스를 상속받아야 함
	=> 생성자 작성시 에러메세지를 부모생성자로 넘겨주면 됨.
	

  => 개발자가 지정한 상황에서 만든 예외클래스가 작동되게 하려면,
	if(정한 조건 제시)
		예외발생시킴
  => 예외를 직접 발생시킬 때는 , throw 키워드 사용함.
		throw new MyException();
  => 예외를 발생시킨 구문을 포함하고 있는 메소드 해더에
		throws 에외클래스명 을 표기함.

	예>
	public 반환자료형 메소드명(.....) throws 예외클래스명
	{
		if(조건)
			throw new 예외클래스생성자(...);

	}

* try ~ with ~ resource 문장
	: 자바 7에서 추가된 기능임.
	=> finally 에 작성되었던 close() 처리를 생략함
	=> 자동으로 close 되게 하는 문장임.

	try(반드시 close 처리해야 하는 객체에 대한 생성구문)
	{
		예외발생 가능성이 있는 문장
		또는
		반드시 예외처리해야 하는 메소드 호출문장
	}
	catch(처리할예외클래스명 레퍼런스)
	{
		처리구문
	}
	finally{
		예외발생이든, 아니든 무조건 실행되어야 하는 문장
	}











