[객체배열 실습 2]

- 프로젝트명 : objectArrayPractice2
- 클래스 추가 : 	
	member.model.dto.Member.java
	member.model.dao.MemberManager.java
	member.view.MemberMenu.java
	member.controller.Main.java (main() 포함)

1. MemberManager 클래스 작성
	: 회원 정보 관리용 클래스
 - Field 구성
	+ SIZE:static int = 10	//배열 크기 지정용 상수
	- memberCount:int		//현재 등록된 객체 수 카운트용
	- mar:Member[] 		//SIZE 사용 배열 초기화 할당함
	~ sc:Scanner	//키보드 입력용 객체 생성 초기화함

 - 초기화블럭 작성 : 테스트에 사용할 샘플 객체 5개 생성함
	{
	  mar[0] = new Member("kim12*3", "김유신", "pwkkk34!", 
				"kim123@naver.com", 'M', 35);
	  ........
	  mar[4] = new Member("yksrose77#", "윤경숙", "yksrose77#", 
				"yksrose77@daum.net", 'F', 29);
	  memberCount = 5;
	}

 - 디폴트 생성자 작성

 - 메소드 작성ㅂ
	1. memberCount 필드에 대한 getter 작성
		public int getMemberCount(){}
	2. 새 회원 정보 입력용 메소드 작성
		public void memberInput(){
		  키보드로 새 회원의 정보를 입력받아, 배열에 기록함
		  Member 클래스의 setter 사용함
		  마지막에 memberCount 1증가시킴		
		}
	3. 배열에서 회원 정보 삭제용 메소드 작성
		public void deleteMember(){
		  삭제할 회원의 아이디를 입력받음
		  리턴받은 인덱스에 대한 회원정보 출력함
		  정말로 삭제하시겠습니까? (y/n) : 출력
		  입력값이 대소문자 상관없이 'Y' 이면, 해당 인덱스의
		  레퍼런스를 null로 처리함
		  단, 검색한 회원의 인덱스가 0 또는 중간 위치일 경우에는
		  지울 위치 뒤의 주소들을 하나씩 앞으로 옮김
		  마지막 인덱스일 경우에만 null 처리함
		  삭제 후 memberCount 1 줄임
		}
	4. 배열에 기록된 현재 회원 전체 정보 출력용 메소드 작성
		public void printAllMember(){
		  Member 클래스의 memberInfo() 사용 출력처리함
		}
	5. 아이디를 이용한 회원정보 검색용 메소드 작성
		public int searchMemberId(String id){
		  전달받은 아이디와 일치하는 회원이 있는지 찾음
		  회원이 존재하면, 반복을 종료하고 해당 인덱스를 
		  존재하지 않으면 -1을 리턴 처리함
		}
	6. 이름을 이용한 회원정보 검색용 메소드 작성
		public int searchMemberName(String name){
		  전달받은 이름과 일치하는 회원이 있는지 찾음
		  회원이 존재하면, 반복을 종료하고 해당 인덱스를 
		  존재하지 않으면 -1을 리턴 처리함
		}
	7. 이메일주소를 이용한 회원정보 검색용 메소드 작성
		public int searchMemberEmail(String email){
		  전달받은 이메일과 일치하는 회원이 있는지 찾음
		  회원이 존재하면, 반복을 종료하고 해당 인덱스를 
		  존재하지 않으면 -1을 리턴 처리함
		}
	8. 한 사람의 회원 정보 출력용 메소드 작성
		public void printMember(int index){
		  전달받은 인덱스에 대한 회원정보 출력함
		  >> Member 클래스의 memberInfo() 메소드 사용함
		}	  
	
	9. 아이디순 오름차순 정렬하는 메소드 작성
		public void sortIDAsc(){
		  현재 등록된 회원에 대한 배열을 복사함
		  복사본에 대해 Select Sort 방식의 오름차순 정렬 처리
		  정렬이 끝나면 각 레퍼런스별 memberInfo()를 사용 출력함
		}
	10. 아이디순 내림차순 정렬하는 메소드 작성
		public void sortIDDes(){
		  현재 등록된 회원에 대한 배열을 복사함
		  복사본에 대해 Select Sort 방식의 내림차순 정렬 처리
		  정렬이 끝나면 각 레퍼런스별 memberInfo()를 사용 출력함
		}
	11. 나이순 오름차순 정렬하는 메소드 작성
		public void sortAgeAsc(){
		  현재 등록된 회원에 대한 배열을 복사함
		  복사본에 대해 Select Sort 방식의 오름차순 정렬 처리			
		  정렬이 끝나면 각 레퍼런스별 memberInfo()를 사용 출력함
		}
	12. 나이순 내림차순 정렬하는 메소드 작성
		public void sortAgeDes(){
		  현재 등록된 회원에 대한 배열을 복사함
		  복사본에 대해 Select Sort 방식의 내림차순 정렬 처리			
		  정렬이 끝나면 각 레퍼런스별 memberInfo()를 사용 출력함
		}
	13. 성별순 내림차순 정렬하는 메소드 작성
		public void sortGenderDes(){
		  현재 등록된 회원에 대한 배열을 복사함
		  복사본에 대해 Select Sort 방식의 오름차순 정렬 처리			
		  정렬이 끝나면 각 레퍼런스별 memberInfo()를 사용 출력함
		}
	14. MemberMenu 클래스에서 회원정보 수정 기능에서 사용함
		인덱스를 전달받아, 
		인덱스 위치에 기록된 객체의 주소를 리턴하는 메소드 작성
		public Member findMember(int index){
		  배열 인덱스에 기록된 주소를 리턴함
		}
