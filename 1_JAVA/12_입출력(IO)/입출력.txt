<입출력>
 : 입력(input)과 출력(output) 처리
 - java.io 패키지의 클래스들로 지원함
	* 단, java 5 버전부터 java.util.Scanner 가 추가되었음
	 => 값의 자료형별 입력이 편하게 사용할 수 있게 되었음.
 - 입출력에는 stream(통로)가 사용됨.

 *** 컴퓨터에서의 입출력 처리 방식 ***
  [입력절차]	
  외부자원(resource)		입력용버퍼		   메모리
   키보드 	------------------	 (stdin)
   디스크의 파일	    읽기용통로 > 입력된값이 기록됨 >읽음> 변수에기록
   네트워크상의 다른 pc ------------
   데이터베이스 서버

	** 읽기용 통로를 InputStream 이라고 함

  [출력절차]	
  외부자원(resource)		출력용버퍼		   메모리
   모니터 	------------------	 (stdout)
   디스크의 파일	   < 쓰기용통로 < 내보낼값이 기록됨 <내보냄< 변수값읽음
   네트워크상의 다른 pc ------------
   데이터베이스 서버

	** 쓰기(출력)용 통로를 OutputStream 이라고 함
	=> stream(통로)는 시스템(os)가 관리하고 있음
		: 외부 자원과의 입출력이 필요할 경우,
		시스템으로 부터 스트림을 얻어와서 사용하고 난 다음
		반드시 시스템으로 스트림을 반납해야 함

 - 스트림은 단방향임(일방통행임)
	입력용 스트림(InputStream)
	출력용 스트림(OutputStream)

 - 자바에서 입/출력을 하려면, 외부자원과 스트림부터 연결시키고,
	그 다음에 읽거나 쓰기를 함
	>> 스트림 클래스에 대한 객체 생성
		: 외부자원과의 통로 만들기임.
	>> 레퍼런스.읽기용메소드() 또는 레퍼런스.쓰기용메소드() 호출

 - 자바에서 스트림의 종류를 두 가지로 구분됨
	* 바이트(byte) 스트림 : 통로로 움직이는 데이터 크기가 1바이트임.
		>> 사운드, 이미지, 동영상과 같은 바이너리 파일들
		>> 기록된 정보를 정확히 볼 수는 없음

		** 네트워크 입출력은 바이트스트림만 지원됨.
			>> 객체 전송시 객체의 직렬화가 요구됨
	*** 직렬화(Seriable)
		: 객체 안에 기록된 각 필드값들을 1바이트단위로 
		쪼개서 일렬로 나열시키는 것

	* 문자(character) 스트림 : 통로로 움직이는 데이터 크기가 2바이트임.
			문자 1개씩 움직임.
		>> 문자 저장용 문서 파일들
		>> 기록된 정보를 볼 수 있음

 - 바이트스트림 클래스의 최상위 : InputStream / OutputStream 클래스
 - 문자스트림 클래스의 최상위 : Reader / Writer 클래스

	=> 읽기용 메소드 : 버퍼에서 읽어내서 변수에 기록하는 메소드
		공통으로 read() 메소드 사용함.
	=> 쓰기용 메소드 : 변수값을 버퍼에 보내서 내보내는 메소드
		공통으로 write() 메소드 사용함.


 - 기본 입출력스트림 클래스에 성능을 보완한 클래스들이 제공됨
	(처리스트림)
	* 버퍼를 이용 : BufferedInputStream / BufferedOutputStream
		     BufferedReader / BufferedWriter
	* 필터를 적용 : FilterInputStream / FilterOutputStream
		     FilterReader / FilterWriter
	* 파일 입출력 : FileInputStream / FileOutputStream
		     FileReader / FileWriter
	* 줄번호자동추가 : LineNumberInputStream
		       LineNumberReader
	* 객체를 입출력 : ObjectInputStream / ObjectOutputStream
		=> 직렬화(Seriable) 처리된 객체의 입출력에 사용함

	* 데이터종류별 입출력 : DataInputStream / DataOutputStream
		=> 주로 객체가 가진 필드값들을 데이터 종류별로 
		   파일에 기록하거나, 읽어올 때 사용함

	* 스래드 간의 입출력 : PipeInputStream / PipeOutputStream
			  PipeReader / PipeWriter
	* 파일 입출력 동시 처리 : RandomAccessFile

 - 처리(보조) 스트림들은 단독으로 객체 생성 못 함
	>> 기본 스트림 클래스에 대한 객체를 사용해서, 객체 생성하도록
	   되어 있음


  외부자원     >>      입/출력 스트림    >> 실행중인 프로그램(프로세스)
   파일               [기본 입/출력 클래스 사용]
   네트워크상의 다른 pc     InputStream/OutputStream 클래스
   데이터베이스 서버        Reader/Writer 클래스
   키보드
   모니터
   다른 스래드

 - 기본 입/출력 스트림을 바로 사용할 경우, 외부 자원과의 처리 속도 차이
   때문에 프로세스가 기다려야 되는 문제가 생기게 됨 : 성능 문제
	=> 이런 문제들을 보완해서 만들어진 클래스 == 보조 스트림 클래스
					 또는 처리 스트림 클래스

  [외부자원] >> 기본스트림 >> 보조스트림1 >> 보조스트림2 >> 프로세스
	=> 성능상의 문제들을 해결할 수 있게 됨.

 * 소스 코드로 표현할 경우
 	보조스트림 클래스 2 레퍼런스 = new 보조스트림2(
		new 보조스트림2(new 기본스트림(외부자원)));

 * ObjectInputStream / ObjectOutputStream
	=> 바이트 스트림만 제공됨
	=> 객체가 가진 정보를 객체상태로 파일에 기록하거나,
	   파일에서 읽어와서 바로 객체에 저장할 때 사용하는 스트림
		*** 반드시 직렬화 처리된 클래스의 객체만
		    사용할 수 있음 ***
	=> 보조 스트림이므로 기본스트림에 대한 객체가 필요함.
	   ObjectIputStream 레퍼런스 = new ObjectInputStream(
		new FileInputStream("파일명" 또는 File객체));
	   ObjectOutputStream 레퍼런스 = new ObjectOutputStream(
		new FileOutputStream("파일명" 또는 File객체));

	=> 객체 입출력에 사용되는 메소드는
	   출력시 : writeObject(객체)
		>> IOException 처리해야 함
	   입력시 : readObject() --> 반환자료형이 Object 이므로
		해당 클래스 타입으로 형변환해야 함
		>> IOException, ClassNotFoundException 2개를
		   처리해야 함

* <직렬화(Serialization)>
	: 클래스에 적용함
	=> 클래스가 객체 생성하고, 그 객체를 
	   Object입/출력에 사용할 경우, 바이트스트림이므로
	   객체 상태로 그대로 스트림으로 전송할 수 없음.
	=> 직렬화가 적용된 클래스 일 때는
	   바이트스트림 크기에 맞춰서, 객체가 가진 필드들을 기록된
	   순서대로 바이트 단위로 길게 연속으로 나열 처리를 함.
		== 직렬화 라고 함.
	=> 직렬화 처리된 객체 정보가 바이트스트림을 거쳐 전송됨.
	=> 읽어 들일 때는 역직렬화가 자동으로 처리됨
		** 바이트 단위로 나열된 값들을 다시 각 자료형별
		   필드값으로 바꾸는 것 **

	=> 직렬화 처리 방법
	   직렬화를 적용할 클래스 해더에 java.io.Serializable 인터페이스
	   상속 처리함.
		class 클래스명 implemenst Serializable { }

  *** 마크업(태그) 인터페이스 ***
	: 추상메소드를 가지고 있지 않는 인터페이스
	=> 표시용 인터페이스

<객체의 필드를 선택적으로 직렬화 처리하는 방법>
  => transient 키워드
	: 객체 직렬화 처리시 제외할 필드 앞에 붙여줌
	예>
	접근제어자 transient 자료형 필드명;


	** 클래스 안에 Object 클래스에 대한 레퍼런스가 필드로
	   포함되어 있다면, 이 필드는 직렬화에서 자동으로 제외됨
	** 상속받은 부모클래스의 필드도 부모클래스가 직렬화 처리가
	   안 되어있으면, 자동으로 제외됨.





