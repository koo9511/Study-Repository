* 다형성(Polymorphism)
 : 객체지향 프로그래밍의 3대 특징중 하나.
 - 상속을 이용한 기술임.
 - 메소드의 매개변수 하나가 여러 종류의 클래스타입을 처리할 수 있는 기능.
 - 상속 관계에 있는 부모 , 자식 클래스 간에 부모타입이 모든 후손타입을
   받아줄 수 있다....
 - 부모 클래스 타입의 레퍼런스가 후손객체의 주소를 받을 수 있다.
	: 후손 객체 안에 부모 멤버가 포함되어 있기 때문에 가능함.
	=> 클래스 형변환임.
	ex>
	AA aob = new BB();
	//AA가 부모클래스이고, BB가 AA의 후손클래스일 때 가능함.
	aob = new CC();
	//CC클래스가 AA의 후손클래스이면 가능함.

 - 동일한 기능을 처리하는 메소드를 여러 개 작성해야 할 경우(처리할 자료형이
	다를 경우) : 오버로딩(Overloading : 이름이 같은 메소드 여러 개 작성)
	=> 오버로딩 메소드의 갯수를 줄일 수 있는 방법으로 다형성을 이용함.
	=> 처리해야 할 여러 종류의 자료가 서로 상속관계에 있다면,
	   메소드 작성시 부모 클래스형 레퍼런스를 매개변수로 작성하면,
	   여러 후손 클래스 타입을 하나의 메소드가 다 처리할 수 있게됨.

** 클래스 형변환
 - 부모클래스형 레퍼런스에 후손객체의 주소가 대입되면
	ex>
	int k = 3.5;
	       double --> int 형으로 바뀜 : 3 이 됨
	k : 3이 대입됨
	ex>
	AA aob = new BB();
		     BB 클래스형 --> AA 클래스형으로 바뀜
		     자동형변환됨.
		     후손타입이 부모타입으로 형변환 : Up Casting 이라함.

 - 후손 객체의 주소를 전달받은 부모레퍼런스를 통해서 사용할 수 있는 후손은 
	정보는 원래 부모 것이었던 멤버만 참조할 수 있음.
	: 부모 것이 아닌 멤버는 부모 레퍼런스로 참조할 수 없음.....

 - 후손객체의 주소를 받은 부모 레퍼런스를 가지고, 후손의 멤버를 참조해야 할
	경우에는, 후손 클래스 타입으로 레퍼런스를 형변환하면 가능함.
	: 부모 클래스 타입을 후손 클래스 타입으로 바꾸는 것
	=> Down Casting 이라고 함. 자동으로 처리 안됨. 직접 처리해야 함.
	((후손클래스형)부모레퍼런스).후손멤버....

** 클래스 간의 형변환은 반드시 상속관계에 있는 클래스끼리만 가능함. **

* instanceof 연산자
  : 주로 Down Casting 해야 할 때, 현재 레퍼런스가 어떤 클래스형 객체의
	주소를 참조하고 있는지 확인이 필요할 때 사용함.
 - if(레퍼런스 instanceof 클래스타입)
	참일 때 처리할 내용 //해당 클래스타입으로 다운캐스팅 처리


* 객체 배열에도 다형성 사용됨
  : 하나의 클래스 타입의 배열공간에 여러 종류의 클래스형 객체 정보를 담음.
  - 원래 배열은 한가지 자료형의 정보들을 여러 개 저장함
	=> 다형성을 이용하면 여러 종류의 정보를 담을 수 있게 됨.

** 향상된 for 문
  : for ~ each 문
  - jdk 1.5 부터 제공됨.
  - 객체배열 처리나 컬렉션 처리에 주로 사용됨.

	for(클래스형 레퍼런스 : 배열)
	{
	   레퍼런스에 대한 처리
	}

//---------------------------------------------------------------------------------
 * 추상(미완성된) 클래스
 : 객체 생성 못하는 클래스임.
 - public abstract class 클래스명{}
 - 클래스 안에 추상메소드를 가지고 있으면, 그 클래스는 반드시 추상클래스가
  되어야 함.
	=> 추상클래스를 상속받은 후손 클래스는 반드시 부모의 추상메소드를
	   완성시켜야 되는 강제성이 부여됨.
	=> 후손이 추상메소드를 반드시 오버라이딩 해야 함.

	** 추상(미완성된) 메소드 
	   : 메소드의 해드(head)만 있고, 몸체(body : 내용)가 없는 메소드

	public abstract 반환자료형 메소드명([자료형 매개변수]);
	//표준화된 인터페이스를 제공할 목적으로 추상메소드 사용됨.
	//메소드 사용의 통일성을 확보할 목적임


 - 추상메소드가 없어도, 추상클래스 만들어도 됨. : 객체 생성 못하게 할 목적임.

//-------------------------------------------------------------------------------------
 * 인터페이스(interface)
 : 상수형 필드와 추상메소드로만 구성된 추상클래스의 변형체
 - 클래스에 추상메소드를 포함시키는 구조보다는 메소드의 통일성을 부여하기
  위해서 추상메소드만 따로 모아놓은 추상클래스.

 	[public] interface 인터페이스명
	{
	  //상수형 필드 : 필드명은 대문자로 지어줌
	   public static final 자료형 필드명 = 초기값;

	  //추상 메소드
	  [public abstract] 반환형 메소드명([자료형 매개변수]);

	}

 - 인터페이스의 사용 : 상속을 통해서 후손이 부모 인터페이스의 추상메소드를
	완성시키는 방식임.
	* 클래스의 상속 : extends 클래스명 (단일상속)
	* 인터페이스의 상속 : implements 인터페이스명 (다중상속 가능)

	class 클래스명 extends 클래스명 implements 인터페이스명
	{}

	class 클래스명 implements 인터페이스명, 인터페이스명, 인터페이스명
	{}

  - 인터페이스간에도 상속이 가능함, 다중 상속 가능함
	interface 인터페이스명 extends 부모인터페이스명
	{}


















































 