<내부(Inner) 클래스>
 : 클래스 안에 작성된 클래스
 - 네스티드(nested) 클래스라고도 함
 - 외부클래스를 인클로징(enclosing) 클래스라고도 함
 - 네스티드 클래스의 종류
	* 정적 네스티드 클래스(static nested class)
	  : 외부(인클로징) 클래스나 인터페이스의 필드로 사용된 경우
	* 이너 클래스(inner class)
	  : non-static nested class
	* 로컬 이너 클래스(local inner class)
	  : 메소드 body{} 안에 선언된 이너클래스
	    인터페이스에는 메소드 body 가 없으므로, 사용 못 함

	ex> 정적 네스티드 클래스 예
	class 외부클래스명 또는 interface 인터페이스명{
		내부클래스 레퍼런스변수;

		//외부클래스의 필드나 메소드처럼 취급됨
		static class 내부클래스명{ 
		//인터페이스 안에서 static 생략되면, 자동으로 static 처리됨
		}
	}

	ex> 네스티드 클래스 예
	class 외부클래스명{
		내부클래스 레퍼런스변수;

		//외부클래스의 필드나 메소드처럼 취급됨
		class 내부클래스명{

		}
	}

	ex> 로컬 이너 클래스 예
	class 외부클래스명{
	    public 예약어 반환자료형 메소드명(.......){
		class 내부클래스명{
		      멤버구성
		}	//메소드 안에서만 사용 가능함.
	        내부클래스 레퍼런스변수;
	    }
	}

	=> 컴파일의 결과는  외부클래스.class
			외부클래스$내부클래스.class
	   2개의 클래스 파일이 만들어짐

 - 내부클래스가 private 일 때는 해당 외부클래스 안에서만 객체생성하고
   사용할 수 있음
	=> 내부클래스의 private 멤버를 외부클래스에서 그냥 접근가능함
	예>
		내부클래스레퍼런스.필드명

 - 내부클래스가 public 일 때는 클래스 밖에서 사용 가능함
	=> 클래스 밖에서 내부클래스를 사용하려면,

	외부클래스 레퍼런스 = new 외부클래스생성자();
	외부클래스.내부클래스 레퍼런스 = 
			외부클래스레퍼런스.new 내부클래스생성자();
	또는
	외부클래스.내부클래스 레퍼런스 = 
			new 외부클래스생성자().new 내부클래스생성자(); 

 - 정적 네스티드 클래스에 대한 필드가 public 일 경우에는, 다음과 같이 사용함
	외부클래스레퍼런스.정적내부클래스필드명

//-----------------------------------------------------------------------------------
 무명(Annonymous) 클래스
	== 익명 클래스
 : 이름이 없는 클래스
 - 내부클래스의 형태로 사용됨
	=> 메소드 안에서 주로 작성됨
	=> GUI 프로그래밍에서 이벤트 처리에 주로 사용됨.
	=> 이벤트 처리용 인터페이스의 메소드 오버라이딩 처리를 위함.
	=> 인터페이스를 상속받지 않고 처리하는 방법임.
	=> 인터페이스를 상속받은 후손은 무조건 부모인터페이스의 
		추상메소드를 모두 다 오버라이딩해야 함.
	=> 자바에서는 이벤트용 인터페이스를 상속받은 후손클래스들을 제공함
		: 인터페이스의 추상메소드를 전부 오버라이딩해 놓았음.
	   	 이런 클래스를 사용하면 필요한 이벤트용 메소드만
		 오버라이딩하면 됨.

		new 생성자(){
			//클래스의 멤버 작성
			//필드 선언
			//메소드 작성
		};

	=> new 다음에는 상속받은 부모클래스명, 인터페이스명을 사용함.

	예>
	class 클래스명{
		클래스 멤버 구성

		//Method
		public 반환자료형 메소드명([자료형 매개변수명,....])
		{
			인터페이스명 레퍼런스 = 
				new 부모클래스 또는 부모인터페이스명(){
				//오버라이딩 처리가 필요한
				//추상메소드 재작성함
				public 반환자료형 메소드(....)
				{
					처리할 내용 작성
				}
			};

			레퍼런스.오버라이딩한메소드();
		}
	}

	=> 익명 클래스는 일회용임.


//-----------------------------------------------------------------------------------------
 네스티드 인터페이스
  : 정적(static) 내부 인터페이스

	ex>
	interface 인터페이스명{
	  //추상메소드 선언
	  [public abstract] 내부인터페이스 메소드명(.....);

	  interface 인터페이스명{
		//추상메소드 선언
		[public abstract] 반환자료형 메소드명(....);
	  }
	}

	ex> 또는 추상클래스 안에서 선언 가능
	abstract class 클래스명{
	  [public] abstract 내부인터페이스 메소드명(....);

	  interface 인터페이스명{
		//추상메소드 선언
		[public abstract] 반환자료형 메소드명(.....);
	  }
	}

	=> 사용
	ex> 내부인터페이스를 가지고 있는 추상클래스를 상속받는 경우
	  class 후손클래스명 extends 추상클래스{
		//부모의 외부 추상메소드 오버라이딩 함.
		public 내부인터페이스 메소드명(....){}

		//부모가 가진 내부인터페이스를 상속받는 내부클래스 작성
		class 클래스명 implements 부모의 내부인터페이스{
		  //부모의 내부인터페이스가 가진 추상메소드 모두 오버라이딩함
		  public 반환자료형 메소드명(.....){}
		}
	  }

	=> 후손 클래스 사용시
		후손클래스명 후손레퍼런스 = new 후손클래스생성자();
		후손클래스레퍼런스.부모클래스의 오버라이딩한 메소드();

		부모클래스명.내부인터페이스 레퍼런스변수 = 
		   후손레퍼런스.new 내부인터페이스상속받은 내부클래스생성자();
		인터페이스레퍼런스.내부인터페이스의 오버라이딩한 메소드();
		







