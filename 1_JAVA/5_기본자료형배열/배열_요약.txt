* 배열(array)
 : 자료형이 같은 변수들의 묶음
 - 같은 자료형의 변수공간이 여러 개 필요한 경우
   이용하면 편리함.
 - 여러 개의 변수가 메모리에 연속으로 나열 할당됨.

 => 자바에서는 배열 사용을 위해서
	1. 배열 선언 : 배열공간을 가리킬 레퍼런스 만들기
		=> 배열공간의 주소저장용 변수 만들기
	자료형[] 배열명;	//배열명 == 레퍼런스 변수(주소저장용 변수)
	자료형 []배열명;
	자료형 배열명[];
	ex>
	int[] ar;
	String[] sar;
	Student[] st;
	---> 배열공간의 주소저장용 레퍼런스를 의미함
	---> 배열 선언시 []안에 숫자쓰면 안됨

	*** 자바에서는 배열명이 곧 레퍼런스변수임.
	레퍼런스(Reference) 변수 : 할당된 장소의 주소(메모리상의 위치정보)
				가 보관됨
			클래스를 자료형으로 선언된 변수.
 
	기본 자료형 변수 : 값이 보관

	2. 배열공간을 힙(heap) 영역에 할당하고, 그 주소를 레퍼런스에
	   기록함 : 힙 영역에 변수공간, 배열공간, 객체공간을 할당할 때
		new 연산자 사용함.

	배열명 = new 자료형[갯수];
	---> []는 반드시 자료형 뒤에 위치함
	---> [] 안에 반드시 할당할 변수방의 갯수(첨자)를 기입해야 함
	---> 첨자는 정수리터럴 또는 정수변수 사용 가능함

	ex>
	ar = new int[100];
	sar = new String[k];		//k = 20;
	st = new Student[200];

	3. 배열 공간의 사용
	: 자동으로 부여된 각 방의 순번(index)를 이용함
	---> for문을 사용해서 값 입력, 출력, 계산처리함
	---> 배열명[순번] == 변수명
	ex>
	int[] ar;
	ar = new int[5];
	ar[0] = 10;
	ar[1] = 20;
	ar[2] = 35;
	ar[3] = 47;
	ar[4] = 55;
	=> for(int i = 0; i < 5; i++)
	   for(int i = 0; i < ar.length; i++)
	   {
		ar[i] = scan.nextInt();
	   }

	*** 배열선언과 할당을 한번에 할 수도 있음
	자료형[] 배열명 = new 자료형[첨자];

 => 배열의 초기화
	- 기본 자료형 배열인 경우
	자료형[] 레퍼런스변수 = {초기값, 초기값, 초기값};
	자료형[] 레퍼런스변수 = new 자료형[]{초기값, 초기값, 초기값};
	ex>
	int[] ar = {10, 20, 30, 40, 50};
	//값의 갯수만큼의 공간을 자동 할당하고, 초기값은 순서대로 기록됨
	//배열공간의 시작주소를 레퍼런스에 대입함

	int[] ar = new int[]{10, 20, 30, 40, 50};
	//배열의 첨자 []안에 기록하면 에러남

	- 클래스 배열(객체 배열)일 경우
	    : 2차원배열 구조를 가짐
	클래스형 []레퍼런스변수 = {new 생성자(초기값), new 생성자(초기값)};
	** 자바에서 String클래스만 기본자료형처럼 사용할 수 있도록
	   해 놓았음 **
	클래스형[] 레퍼런스 = new 클래스형[]{new 생성자(초기값), 
				new 생성자(초기값),....};

** 기본 자료형 2차원배열
 => [1차원]배열 : 자료형이 같은 변수들의 묶음
	- 배열 선언과 할당시 []기호를 1개 사용
 => 2차원배열 : 자료형이 같은 1차원배열들의 묶음
	- 배열 선언과 할당시에 []기호 2개 사용
	ex>
	int[] ar = {10, 20, 30, 40, 50};
	int[] br = {60, 70, 80};
	int[] cr = {90, 100, 110, 120};
	=>
	int[][] tar = {{10, 20, 30, 40, 50}, {60, 70, 80}, 
			{90, 100, 110, 120}};

	- 2차원배열의 선언 : 2차원배열명을 레퍼런스변수임.	
	- 2차원배열의 메모리 할당구조는 객체배열과 동일함

		자료형[][] 배열명;
		자료형 []배열명[];
		자료형 배열명[][];
		ex>
		int[][] tar;
		int []tar[];
		int tar[][];

	- 2차원배열의 할당(생성) : 첫번째 new는 레퍼런스배열 할당임.

		배열명 = new 자료형[행값][열값];
		배열명 = new 자료형[행값][];
		* 메모리 할당시에는 []기호는 반드시 자료형 뒤에 붙임.
		* 열값은 생략될 수도 있음. 
			: 1차원배열들의 값의 갯수가 다를 경우
		* 행값 : 2차원배열 안의 1차원배열의 갯수
		* 열값 : 각 1차원배열 안의 값의 갯수
		ex>
		tar = new int[3][5];
		tar = new int[3][];		//동적(가변) 배열임.
		** 힙 영역에 1차원배열의 주소 보관용 레퍼런스 3개가
		   연속으로 나열 할당됨.

	- 2차원배열의 할당은 2번 해야 함
		: 두번째 new가 값기록용 배열공간 할당임.
		배열명[인덱스] = new 자료형[값의갯수];	
					열값임.
		ex>
		tar[0] = new int[5];
		tar[1] = new int[3];
		tar[2] = new int[4];

	- 2차원배열의 값 입력/출력/조회/사용시 2중 for문 사용됨

		for(행초기식; 조건식(.length); 증감식) //행 갯수만큼 반복
		{
		  //각 행별로 참조되는 1차원배열 값에 접근
		  for(열초기식; 조건식(각행별.length);증감식)
		  {
			배열명[행인덱스][열인덱스] = 값;
		  }
		}

		ex>
		for(int i = 0; i < tar.length; i++)
		{
		  for(int j = 0; j < tar[i].length; j++)
		  {
			tar[i][j] = 값;
			syso(tar[i][j]);
		  }
		}

//-------------------------------------------------------------------------------------
* main 메소드의 arguments
 => 프로그램 실행시 main 한테 전달할 값을 입력하면, 
 => main의 매개변수 (String[] args)가 문자열 배열로 각 값을 자동으로
    전달받음
 => 이클립스에서는 'Run Configuration...'을 사용해서
    해당 클래스의 실행시 '${string_promt}'로 셋팅하면 
    전달값을 프롬프트 입력창을 통해서 전달할 수 있게 됨.

 => 메인에 전달된 값은 모두 문자열 값임
 => String 클래스형을 기본자료형 값으로 바꾸는 것을 parsing 이라고 함
 => 각 자료형별 parsing 메소드가 제공됨
	: java.lang 패키지에 Wrapper 클래스가 제공됨
	- 래퍼 클래스에서 파싱 메소드가 제공됨

	* Wrapper 클래스 : 기본자료형을 클래스로 만들어 놓은 것

	기본자료형		Wrapper class
	---------------------------------------------------------
	boolean		Boolean class
	byte		Byte class
	short		Short class
	int		Integer class
	long		Long class
	float		Float class
	double		Double class
	char		Character class

 => "123" ---> 정수값으로 변경을 원하면 
		int num = Integer.parseInt("123");
    "7.7" ---> 실수값으로 변경을 원하면
		double dnum = Double.parseDouble("7.7");
    "A"  ---> 문자값으로 변경을 원하면
		char ch = "A".charAt(0);



















