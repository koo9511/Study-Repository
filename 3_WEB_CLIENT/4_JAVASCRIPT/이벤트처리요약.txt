[자바스크립트에서의 이벤트 처리]

 * DOM Level 0
   - 인라인 이벤트 모델
	: tag 에 직접 적용하는 방법
	 <시작태그명 on이벤트명="자바스크립트 소스코드">
	 <시작태그명 on이벤트명="자바스크립트 함수실행();">

   - 기본 이벤트 모델
	: tag 에 적용하지 않고 <script> 영역 안에서 이벤트처리
	 소스를 사용하는 방법
	<script type="text/javascript">
	  window.onload = function(){
		//이벤트 적용 대상을 변수로 추출함
		var 객체변수명 = document.getElementById("id명");
		var 객체변수명 = document.getElementByTagName("tag명");
		var 객체배열명 = document.getElementsByTagName("tag명");

		//대상에 원하는 이벤트 적용 처리 1
		객체변수명.on이벤트명 = function([이벤트변수명]){
			이벤트 발생시 작동할 내용에 대한 소스 작성
			또는 이벤트변수가 가진 이벤트정보를 소스에
			이용할 수도 있음. =>
			this.이벤트변수명.속성명 [= 값];
		};

		//대상에 원하는 이벤트 적용 처리 2
		function 함수명(){
			이벤트 발생시 작동할 내용 소스 작성
		};

		객체변수명.on이벤트명 = 함수명;

		//대상에 설정한 이벤트 해제
		객체변수명.on이벤트명 = null;
	  }
	</script>

 *** form 태그의 onsubmit 에 대한 처리 ----------------------------------
	=> submit 버튼을 클릭했을 때, 입력양식들에 입력/선택된 값에 대한 유효성 검사를 필요로 할 때 적용함 : 값에 오류가 없으면 서버로 전송함

	<form onsubmit="함수명()"> ........ </form>

	=> 값에 오류가 있을 경우에는 서버로 전송하지 말고, 발생한 이벤트도 취소되게 하고, 다시 form에 오류가 발생한 입력양식으로 돌아가게 처리함

	<script>
	   function 이벤트처리용함수(){
		입력양식 값들에 대한 오류 검사 소스 코드 작성
		오류가 있을시에는 

		입력양식객체.focus(); 또는 입력양식객체.select();
		return false;
	   }
	</script>

---------------------------------------------------------------------------------------
 * 태그 안에 태그가 사용된 경우
   예>
	<div>
		<div>
			<h1>
				<p></p>
			</h1>
		</div>
	</div>

   => 브라우저에서는 웹문서(*.html)를 로드(load)하면서 문서에 사용된 태그들을 해석해서 DOM(Document Object Model) 트리구조를 만듦
   예>
		html
	head		body
	meta		div
	title		div
	style		h1
	script		p

   => 최하단의 엘리먼트 p에 on이벤트를 설정하면, 해당 이벤트 발생시 이벤트 처리하고 나서, 바로 위 엘리먼트가 동일한 이벤트설정을 한 경우라면 위 엘리먼트로 이벤트가 전달됨.
   => 하위 엘리먼트에서 발생한 이벤트가 상위 엘리먼트로 전달되지 않게 하려면, 이벤트 전달을 못하게 설정하면 됨
	* IE
	  이벤트변수명.cancelBubble = true;

	* 그외 브라우저
	  if(이벤트변수명.stopPropagation)//이벤트 객체안에 속성이 있다면
	  	이벤트변수명.stopPropagation();

----------------------------------------------------------------------------------------
	
 * DOM Level 2
   - Microsoft Internet Explorer 이벤트 모델

   <script>
     window.attachEvent('onload', function(){
	var 객체변수명 = document.getElementById("id명");
	function 함수명(){ 이벤트 발생시 작동 내용 소스 };

	객체변수명.attachEvent('on이벤트명', 실행할 함수명);
	객체변수명.detachEvent('on이벤트명', 실행할 함수명);
     };
   </script>

   - 표준 이벤트 모델

   <script>
     window.onload = function(){
	var 객체변수명 = document.getElementById("id명");
	function 함수명(){ 이벤트 발생시 작동 내용 소스 };

	객체변수명.addEventListener('이벤트명', 실행할 함수명);
	객체변수명.removeEventListener('이벤트명', 실행할 함수명);
     }
   </script>

*** 모든 브라우저에 적용할 수 있는 통합 소스일 경우
	if(객체변수명.attachEvent) //IE 라면
	{}
	else{}	//그외 브라우저












