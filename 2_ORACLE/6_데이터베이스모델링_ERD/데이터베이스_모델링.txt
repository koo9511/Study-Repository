[데이터베이스 모델링]

* 데이터베이스 설계 과정 -------------------------------------------

① 사용자 요구 사항 분석 
  : 데이터베이스 설계자들은 데이터베이스 사용자들이 어떻게 데이터베이스를 
   이용할 것인가, 즉 요구사항을 이해하고 문서화하기 위해서 면담을 한다. 
   이 결과로 간결하게 작성된 사용자 요구 사항 명세가 만들어진다.

② 개념적 데이터베이스 설계 
  : 현실 세계의 추상화를 통해 속성들로 기술된 개체 타입과 이 개체 타입들 간의 
   관계를 나타내는 개념적 데이터 모델을 사용해서 데이터베이스에 대한
   개념적 구조를 만들게 된다.

   개념적 구조란 사용자들의 데이터 요구 사항들을 간단히 기술한 것으로, 
   데이터 타입, 관계, 제약 조건들을 설명한다.

   개념적 데이터베이스 모델의 설계 중 가장 대표적인 것이 E-R(개체-관계) 모델이고, 
   이는 데이터베이스 구현을 위한 전단계의 논리 설계로 많이 사용된다.

③ 논리적 데이터베이스 설계 
  : 데이터베이스를 실제로 구현하기 위해서는 고수준의 개념 구조를 
   목표 데이터베이스 관리 시스템(DBMS)의 구현 데이터 모델로 변환할 필요가 있다. 
   이 변환 과정을 논리적 데이터 모델링 이라고 부르며, 
   또한 이 단계를 논리적 데이터베이스 설계라고 부른다.

④ 물리적 데이터베이스 설계 
  : 물리적 데이터베이스 설계는 논리적 구조로부터 
   효율적이고 구현 가능한 물리적 데이터베이스 구조를 설계하는 것이다.  
   데이터베이스의 물리적 구조는 데이터베이스 시스템의 성능에 중대한 영향을 미친다.  
   물리적 데이터베이스 구조는 데이터베이스에 포함될 여러 파일 타입에 대한 
   저장 레코드의 양식, 순서, 접근 경로, 저장 공간의 할당 등을 표현한 것이다.

* E-R 다이어그램의 표기법 ------------------------------------
  사각형 - 개체 타입
  타원 - 속성
  마름모 - 관계 타입
  선 - 속성과 개체, 개체와 관계
  이중타원 - 다중값 속성
  점 타원 - 유도 속성
  이중선 - 관계집합 내의 개체의 참여[전체]
  주 키 속성에는 밑줄을 긋는다.
  주 키를 갖지 않는 개체집합을 약 개체집합이라 하며, 
   강 개체집합이 있어야만, 약 개체집합이 존재한다.

  ERD의 특징은 현실자료의 정적인 관계와 자료구조를, 
  자료간의 관계로 쉽게 표현한다는 것이다.   
  하지만 시간적 흐름에 대한 표현이 부족하다는 단점이 있다.

* 네 가지 사상관계 -----------------------------------------------
  일대일(1 : 1) : 집합 X의 각 원소는 집합 Y의 원소 하나와 연관될 수 있는 동시에 
                     집합 Y의 각 원소도 집합 X의 원소 하나와 연관될 수 있다.

  일대다(1 : n) : 집합 X의 각 원소는 임의의 수의 Y 원소와 연관될 수 있지만 
                     Y의 각 원소는 많아야 하나의 X 원소와 연관될 수 있다.

  다대일(n : 1) : 집한 X의 한 개체는 Y의 한 개체와 연관될 수 있지만 
                     Y의 한 개체는 X의 여러 개체와 연관될 수 있다.

  다대다(n : m) : 집합 X의 각 원소는 임의의 수인 Y의 원소와 연관될 수 있고, 
                     Y의 각 원소도 임의의 수인 X의 원소와 연관될 수 있다.


* 데이터 모델링의 구성요소 -----------------------------------------
  데이터 모델은 엔티티(entity), 속성(attribute), 관계(relation)라는 3대 요소로 구성된다. 
  데이터 모델링은 이러한 세 가지 요소를 현실 업무에서 추출해 나가는 과정이다. 
  작업 대상 혹은 목표의 의미를 정확히 이해하는 것은 매우 중요하므로 
  이 세 가지 용어의 의미를 주의 깊게 새겨보기 바란다.

● 개체 혹은 엔티티(entity)
  엔티티(entity)는‘개체’로 번역하며, 물리적 모델에서는 테이블(table)이라고 칭한다. 

개체라는 것은 무엇인가? 
  명백히 다른 것과 구분되어 존재하는 것, 실체나 개념을 의미한다. 
  사람, 물건, 문서 등을 예로 들 수 있지만 현실 세계에 존재하지 않는 것도 분명 
  개체가 될 수 있다.
  ‘동일한 특성을 가진 정보들의 집합’ 이라 할 수 있고,
  ‘관리 대상인 데이터 집합’이라고도 표현한다.
  2차원 테이블 형태로 표현할 수 있는 모든 자료로 이해해도 될것이다. 
  모델링 다이어그램에서는 사각형 박스로 표현한다.

● 속성(attribute)
 속성이란 개체의 구성요소로 이름, 가격, 시간, 수량 등의 간단한 데이터 항목을 의미한다. 
 데이터베이스에서 속성은 숫자, 문자, 문자열, 날짜, 이진 데이터(binary data) 등의 
 단일 값(single value)을 기록하며, 다른 항목과 구분을 위한 이름이 부여되는 
 최소 저장 단위이다. 
 모델링 다이어그램에서는 엔티티 박스 내에 표기된다.

● 관계(relation)
 데이터모델을 구성하는 엔티티간 의존성 혹은 연결 정보를 표현한 것을 
 관계(relation)라고 한다. 
 개체는 단독으로 의미를 가지는 경우도 있지만, 대체로 여러 종류의 개체가 조합되어 
 의미 있는 정보가 된다. 
 쇼핑몰에서 물건을 구매하는 프로세스에서 ‘상품 구매 기록’을 관리하는 경우를 
  가정해보자. 
 구매 기록은 상품, 구매자, 판매자 등의 개체에 대한 정보와 판매 기록 그 자체
 (판매금액, 일시, 지불방법)가 조합되어야만 쓸모 있는 정보이다. 
 이렇듯 다양한 개체간 상관관계 혹은 연결(link)을 정의하는 것이 관계 설정이다. 
 일 대 일, 일 대 다, 다 대 다 등의 관계가 있으며 비즈니스 규칙을 표현하는데 있어 
 중요한 역할을 수행한다. 
다이어그램 상에서는 점선 혹은 실선으로 표기한다.


* 데이터베이스 모델링 절차 ------------------------------------------------ 

● 업무 흐름(Business Workflow) 파악
당연한 이야기일지 모르지만, 모델링에 앞서 사용자의 요구사항을 문서화하는 작업이 
선행되어야 한다. 
현실 업무에 대한 지침서(manual)가 있다면 다행이지만 참고할만한 문서가 없거나, 
업무 흐름을 새롭게 정리해야할 경우도 있다. 
일정에 쫓기고, 번거롭다고 해서 간단한 대화만으로 업무 파악을 끝내는 경우가 
비일비재하지만 정확한 용어로 업무 흐름을 세심하게 문서화하길 바란다. 
의뢰인으로부터 업무 흐름에 대해 설명을 들어가면서 정리하는 내용이 바로 모델링을 
위한 재료가 된다. 
그 중에서 다양한 정보가 발생하고 관리해야 하는 명사는 개체와 속성이 되고 
각 개체를 묘사하는 형용사는 속성이 된다. 
각각의 개체가 어떻게 조합되는지 설명하는 동사 혹은 문장은 관계가 된다. 
업무 흐름을 상세히 정리할수록 모델링 및 설계 단계가 편해지기 마련이다. 
귀찮다고 건너뛰지 말자. 
개발자들이 사용자와 마주하는 업무로 인해 많은 스트레스를 받지만, 
피하면 모델링 단계에서부터 일이 지연되는 경우가 많다.

● 개체(entity) 추출
개체란 시스템의 관리 대상으로 사람, 물건 등의 실체나 개념을 의미한다. 
구축 대상 업무에서 무엇을 개체로 파악해야 하는가에 대한 정답이나 절대적인 공식은 
존재하지 않는다. 
하지만, 대략적인 선정 기준을 제시할 수는 있다. 
업무명세 중에서 명사는 개체가 될 수 있는 후보가 되며, 그 가운데서 장기간 보존해야 
하거나, 시스템이 종료한 후에도 지워져 서는 안 되는 정보를 추출한다. 
예를 들면 다음과 같다. 

- 사람(고객, 직원)이나 조직 체계 (회사, 부서, 대리점)
- 물품 혹은 서류(재고 상품, 문서, 부품), 각종 설비 (건물, 운송수단)
- 각종 개념 (주문 및 거래 기록, 통화 내역, 배송 정보, 은행계좌)

위에 나열한 명사들을 살펴보면 현실세계에서 존재하는 대상은 손쉽게 파악할 수 있다. 
실물로 존재하는 대상을 찾는 것은 그리 어렵지 않다. 
하지만, 관리할 대상 중 개념적으로 존재하는 것을 개체로 선정하지 못하고 자칫 
지나치는 경우가 있다. 
이러한 불상사를 막기 위해서는 업무흐름(workflow) 혹은 활동을 그려보고 
각 단계에서 새롭게 발생하거나, 변화하는 자료가 없는지 점검해 봐야한다. 
종이와 펜을 놓고 대략적인 플로우 차트를 그려가면서 입출력되는 정보가 있는지 
점검해보는 것도 좋다. 
입출력되는 정보 중 보존해야할 정보가 없는지 살펴보기 바란다. 
쇼핑몰 구축을 예로 들면 상품에 대한 주문과 발송, 배송 정보가 발생했을 때, 
거래 시점에만 사용한다면 상관없지만, 거래 종료 이후에도 해당 정보를 조회하려 한다면
 개체로 선정되어야 한다. 
데이터 모델링을 수행함에 있어 시스템 구축을 위한 기술적인 지식보다는 
고객이 원하는 바가 무엇인가, 무엇을 관리해야 하는가, 
현실 세계의 업무가 어떻게 흘러가는가에 대한 이해가 더욱 중요하다. 
개체를 추출하는 작업은 기록 가능한 모든 것을 찾아내는 것이 아니라, 
기록할 필요가 있는 것을 찾는 것이기 때문이다.

● 개체간의 관계 설정
데이터베이스는 자료를 저장하기 위한 시스템으로 설명할 수 있지만, 
그보다 중요한 것은 가치 있는 정보를 어떻게 효율적으로 정확히 조회할 수 있는가 
하는 점이다. 
다수의 개체가 어떻게 연결되며, 각 개체들은 어떤 관계를 가지고 있는가를 
정의하는 작업을 통해 효율적인 검색 조회를 위한 기초가 다져진다. 
개체를 추출한 후에는 개체 간 의존 관계(부모 자식 관계)를 파악한다. 
또한, 개체간 관계를 분석하다보면 새로운 개체가 나타나기도 한다. 
부서와 팀원이라는 두 개의 개체를 추출했다고 가정해보자. 
목표 시스템이 인사관리 시스템이라면, 각 팀원은 특정 부서에 속한다는 관계를 
파악할 수 있으며, 이러한 관계를 표현하기 위해 나타내는 소속이라는 
개체(혹은 개념)를 추가해야 한다. 

● 주요 키(primary key)와 속성(attribute) 파악 및 제약 설정
데이터베이스 시스템에서는 둘 이상의 개체를 조합하여 정보를 추출하는 경우가 많다. 
또한 각 개체에 포함된 정보를 정확하게 검색할 수 있도록 개체에 포함된 데이터를 
유일하게 구분할수 있는 정보(주요 키)를 설정해야 한다. 
그리고 각 속성 크기와 자료 유형을 결정하며, 속성에 빈 값이 들어가서는 안 되는 식의 
제약 사항을 지정한다.

● 상향식 분석을 통한 재구성
하향식 분석을 통해 구축 대상 개체, 관계, 속성 등을 파악한 후 
사용자에게 나타나는 화면, 통계 보고 등을 확인하고 누락된 항목은 없는지 
다시금 모델을 검토하는 작업을 수행해야 한다. 
상향식 분석 과정에서는 새로운 개체를 추출하기 보다는 속성을 추가하고, 
관계를 더욱 명확히 파악하는 데 중점을 둬야 한다.



