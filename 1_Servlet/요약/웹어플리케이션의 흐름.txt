<웹 어플리케이션의 흐름>
 : MVC 패턴의 모델2 방식 : 서블릿(Servlet)이 컨트롤러의 역할을 수행함

* View					*controller
 - *.html의 form에 값 입력함			 - 호출된 서블릿의
 - submit 클릭시 action으로 		=>  메소드의 매개변수 request가 값들을
   연결된 서블릿으로 입력값들이		    받고, response가 클라이언트
   전송됨					   정보를 받음
 - 전송값들은 request 객체에 담겨져서 전송됨
   request와 함께 response 객체도 같이 전송됨		||
   response에는 클라이언트의 정보가 들어있음.		\/
					* entity(model)
					 - request 로 받은 값들
					   저장용 클래스임
					 - 값을 보관할 멤버변수와
					   getter, setter 메서드로
					   구성됨
					 - 사용은 서블릿에서 객체
					   생성을 통해 값을 저장
						||
						\/
  * 컨트롤러				* dao(model)
  - dao가 보낸 결과를 가지고			 - 컨트롤러에 의해서 실행됨
   성공/실패에 따라 view를 			 - 컨트롤러가 보낸 entity를
   선택해서 클라이언트로		<=	   받아서, db 서버와 연결
   보내는 처리함				   하고, 쿼리문 만들어서 
					   db에 보내서 실행시키고
					   결과 받아서, 다시 컨트롤러
					   한테 결과 보냄

 : MVC 패턴의 모델 1 방식 : JSP 가 컨트롤러의 역할을 수행함.
 * JSP(Java Server Page)
	: HTML + JAVA 코드 함께 사용하는 페이지
	- 메인은 HTML 임. <= CSS + JavaScript + jQuery + Ajax + JAVA
	- DB 에서 조회해 온 값은 JAVA 코드로 출력 처리해야 함

	- 클라이언트 브라우저에서 발생한 데이터를 서버 컨트롤러로 전송을 하려면
	  1. HTML의 <FORM action="값 받을 컨트롤러이름"> 사용하는 방법
	  2. HTML의 <A href="값 받을 컨트롤러이름?변수명=값&변수명=값">
		: 쿼리스트링을 사용하는 방법
	  3. Ajax로 open('post', '값 받을 컨트롤러이름'); 
		  send("변수명=값&변수명=값");		사용하는 방법
	  4. Ajax로 open('get/put', '값 받을 컨트롤러이름?변수명=값&변수명=값");  사용하는 방법








