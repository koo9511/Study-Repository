[파일 업로드]

 1. 웹서버에 업로드된 파일들을 저장할 폴더를 만든다.
 	예> web/savedFiles 또는 web/uploadFiles 등

 2. JSP에서 게시판에서 필수로 필요한 기능인 파일 업로드 기능이다.
   파일 업로드 기능은 기본으로 지원해주지 않으므로 오픈 라이브러리를 다운받아 
   이용하면 쉽게 구현이 가능하다.
	=> 다운받은 jar 파일은 WEB-INF/lib 폴더 아래에 복사함

 *** 파일 업로드 라이브러리에는 대표적으로 
   - commons-fileupload.jar 
	https://commons.apache.org/proper/
		commons-fileupload/download_fileupload.cgi
   - cos.jar		  가 있다.

 3. 파일 업로드 소스 코드 구현

//***********************************************************
*** 톰켓 서버 중지 >> 서버 설정 파일 열기 >> 왼쪽 하단의 첫번째 항목 체크함
	serve modules without publishing
 => 지정한 프로젝트 폴더로 저장하게 됨
 => 체크 안하면 워크스페이스의 .metadata 폴더로 저장됨
//**********************************************************

[cos.jar 라이브러리를 이용해서 파일 업로드 기능을 구현]

 1) 파일 전송 폼 작성 : fileUploadForm.jsp 또는 fileUploadForm.html
	=> 파일 업로드를 하기 위해선 form 태그에 속성 추가함
	   enctype="multipart/form-data" 부분이 명시되어야 한다.
	=> 파일을 선택할수 있는 <input type="file"/> 로 지정한다. 

 <예>
   <form name="fileForm" id="fileForm" method="POST" 	
	action="fileUpload" enctype="multipart/form-data">
    	<input type="text" name="title" id="title"/>
    	<input type="file" name="uploadFile" id="uploadFile"/> 
    	<input type="submit" value="전송"/>
   </form>

 2) 파일을 전송받은 서블릿(예: fileUpload)이나 jsp 파일에서 코드 작성함
 <예>
   import com.oreilly.servlet.MultipartRequest;
   import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
   import java.io.*;
 
 //메소드 안 ----------------------------------------
    request.setCharacterEncoding("UTF-8");
 
    // 전송 파일 용량 제한 : 10Mbyte 제한한 경우
    int maxSize = 1024*1024*10;        
 
    // 웹서버 컨테이너 경로 추출함 
    String root = request.getSession().getServletContext().getRealPath("/");
    //또는 별도의 저장위치를 지정함
    //String root = "c:\\savedFiles";
	
    // 파일 저장 경로(ex : web/savedFiles) 정함
    String savePath = root + "savedFiles/";
 
    // 업로드 파일명
    String uploadFile = "";

    try{
 
        MultipartRequest multi = new MultipartRequest(request, 
			savePath, maxSize, "UTF-8", 
			new DefaultFileRenamePolicy());
        

        // 업로드 파일명
        uploadFile = multi.getFilesystemName("uploadFile");
 
    }catch(Exception e){
        e.printStackTrace();
    }
 
//---------------------------------------------------------------------------------------
 *** 파일을 저장할때 "20140819151221.zip" 같이 파일명을 rename하여 주로 사용한다. 
이유는 EUC-KR 서버에 한글로 된 파일명을 저장했다가 파일명이 깨지는 경우가 발생하면 복구가 어렵기 때문이다. 
요즘은 서버들이 UTF-8로 맞춰져 있어서 큰 상관은 없지만, 
서버 로케일이 다른 환경으로 이관할때 문제를 줄이는 방법이기도 하다.

그런 이유로 파일 업로드시 
원래 파일명과 변경된 파일명을 DB에 저장하고 파일 다운로드 구현시 
원본 파일명으로 내보낸다.
<예>
   import com.oreilly.servlet.MultipartRequest;
   import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
   import java.io.*;
   import java.util.Date;
   import java.text.SimpleDateFormat;
 
 //메소드 안 ----------------------------------------
    request.setCharacterEncoding("UTF-8");
 
    // 전송 파일 용량 제한 : 10Mbyte 제한
    int maxSize  = 1024*1024*10;    

    //enctype="multipart/form-data" 인지 체크함
    boolean isMultipart = ServletFileUpload.isMultipartContent(request);
    if(!isMultipart){ 
      	response.sendRedirect("/test/error.jsp");
    }    
 
    /* 웹서버 컨테이너 경로 추출함
    String root = request.getSession().getServletContext().getRealPath("/");
 
    //파일 저장 경로(ex : web/uploadFiles) 정함
    String savePath = root + "uploadFiles"; */
    
    //또는 직접 파일저장 위치를 지정해도 됨
    String savePath = "c:\\work\\uploadFiles";
 
    // 업로드 파일명
    String uploadFile = "";
 
    // 실제 저장할 파일명
    String newFileName = "";
 
 
 
    int read = 0;
    byte[] buf = new byte[1024];
    FileInputStream fin = null;
    FileOutputStream fout = null;
    long currentTime = System.currentTimeMillis();  
    SimpleDateFormat simDf = new SimpleDateFormat("yyyyMMddHHmmss");  
 
    try{
 
        MultipartRequest multi = new MultipartRequest(request, savePath, maxSize, "UTF-8", new DefaultFileRenamePolicy());
         
        // 전송받은 parameter의 한글깨짐 방지
        String title = multi.getParameter("title");
        title = new String(title.getBytes("8859_1"), "UTF-8");
 
        // 파일업로드
        uploadFile = multi.getFilesystemName("uploadFile");
 
        // 실제 저장할 파일명(ex : 20140819151221.zip)
        newFileName = simDf.format(new Date(currentTime)) +"."
		+ uploadFile.substring(uploadFile.lastIndexOf(".")+1);
 
         
        // 업로드된 파일 객체 생성
        File oldFile = new File(savePath + uploadFile);
 
         
        // 실제 저장될 파일 객체 생성
        File newFile = new File(savePath + newFileName);
         
 
        // 파일명 rename
        if(!oldFile.renameTo(newFile)){
 
            // rename이 되지 않을경우 강제로 파일을 복사하고 기존파일은 삭제
 
            buf = new byte[1024];
            fin = new FileInputStream(oldFile);
            fout = new FileOutputStream(newFile);
            read = 0;
            while((read=fin.read(buf,0,buf.length))!=-1){
                fout.write(buf, 0, read);
            }
             
            fin.close();
            fout.close();
            oldFile.delete();
        }   
 
    }catch(Exception e){
        e.printStackTrace();
    }

//------------------------------------------------------------------------------------
[commons-fileupload.jar 라이브러리를 이용해서 파일 업로드 기능을 구현]

1. 다운로드 및 설치 

- 다운로드
파일업로드를 구현하기 위해서는 먼저 jakarta에서 제공하는 
commons-fileupload.jar와 commons-io.jar파일이 필요하다.

https://commons.apache.org/proper/
		commons-fileupload/download_fileupload.cgi
https://commons.apache.org/proper/commons-io/download_io.cgi

여기서 최신버전을 zip파일로 다운을 받도록 한다.

- 설치
다운로드 받은 zip파일을 각각 압축을 풀면 
commons-fileupload-1.3.1.jar와 commons-io-2.4.jar 파일을 
설치할 컨텍스트 아래 WEB-INF/lib 아래에 넣으면 
설치는 끝난다.


2. FileUploadServlet.java

- Source

import java.io.File;
import java.util.List;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

- 메소드 안 소스 구현

// commons-fileupload.jar 사용한 컨트롤러
	request.setCharacterEncoding("utf-8");
	
	//한번에 업로드 가능한 파일의 용량 지정 : 10메가바이트일 경우
	long fileLimit = 10 * 1024 * 1024;
	//한번에 전송 가능한 업로드 총 용량 지정 : 100메가 바이트일 경우
	long requestLimit = 100 * 1024 * 1024;
	
	//enctype="multipart/form-data" 인지 체크함
	//org.apache.commons.fileupload.servlet.ServletFileUpload 
	boolean isMultipart = ServletFileUpload.isMultipartContent(request);
	if(!isMultipart){
		response.sendRedirect("/testf/error.jsp");
	}
		
	//메모리에 저장할 최대 사이즈 지정
	//org.apache.commons.fileupload.disk.DiskFileItemFactory
	DiskFileItemFactory factory =  new DiskFileItemFactory();
	factory.setSizeThreshold(1024);
	
	//저장 공간 생성 : 저장할 위치 지정
	//1. 웹서버 컨테이너 경로에 폴더 생성시키는 경우
	//File uploadDir = new File(request.getSession().getServletContext().getRealPath("/uploadFiles"));
	//2. 임의의 위치에 폴더 생성시키는 경우
	File uploadDir = new File("F:\\오후반공유\\수업자료\\workspace\\testFileUpDownProject\\web\\uploadFiles2");
	factory.setRepository(uploadDir);
	
	//업로드 핸들러 생성
	ServletFileUpload upload = new ServletFileUpload(factory);
	//전송 가능한 총 크기 셋팅
	upload.setFileSizeMax(requestLimit);
	
	try {
		//폼에서 전송한 파일 정보를 읽어서 저장함
		List files = upload.parseRequest(request);
		for(int i = 0; i < files.size(); i++){
			FileItem item = (FileItem)files.get(i);				
			
			//용량초과 체크
			if(!item.isFormField()){
				String fileName = new File(item.getName()).getName();
				//System.out.println(fileName);
				//System.out.println(uploadDir);
				long fileSize = item.getSize();
				
				if(fileName != null && !fileName.equals("")){
					//용량 초과 검사
					if(fileLimit < fileSize)
						response.sendRedirect("/testf/error.jsp");
					else
						item.write(new File(uploadDir + "\\" + fileName));
				}
			}
		}
	} catch (Exception e) {
		 e.printStackTrace();
	}



