Start setting/Perference



1. 대소문자 자동완성 기능 추가하기 

인텔리제이 설정 Editor ➞ General ➞ Code Completion ➞ Match case 체크 해제 



인텔리제이는 일단 타이핑을 하면 해당 문자열에서 클래스 이름을 찾아냅니다.

다만 기본값으로 대소문자 구분을 하기 때문에 Preferences > Editor > General > Code Completion 에서 맨 위에 있는 Match Case 설정을 꺼 주세요.

그 설정을 저장한 채로 integer 를 입력과 동시에 Integer 자동완성이 팝업으로 뜰겁니다.









0. 설정에서 Live template 검색 



할당된 basic ( 컨트롤 스페이스 ) 단축어들 찾아보기 : 커스터마이징 가능!!!!



3.마우스 휠로 글자크기 변경하기 





4.이클립스의 프로젝트 ➞ 모듈

대응되는 개념으로 설명하자면 

Eclipse에서의 Workspace가 IntelliJ 에서는 Project가 되고..

Eclipse에서의 Project가 IntelliJ에서는 Module이 됩니다..

저 같은 경우는 주로 사용하는 프로젝트의 형식이 maven이나 gradle 프로젝트라서..

인텔리J에서 Project를 만들때 Empty 프로젝트를 만든뒤..

Module을 import 하는 형식으로 사용하고 있습니다..

하는 방법은 지금 올리신 스크린샷을 기준으로 보여드리면 File -> Project Structure 라고 있죠..?

거길 들어가면 나오는 화면에서 왼쪽에 Module이라고 있을겁니다..

그걸 선택한뒤 + 버튼 클릭해서 Import Module을 선택합니다..

만약 maven 프로젝트면 pom.xml을, gradle project면 build.gradle을 선택해주시면 됩니다..





5.최소 폰트 지정하기 ➞ 그보다 작은 폰트로 설정 불가. 

이건 설정들어가서 하면된다. 그냥. 





0. import 클래스명 끝까지 나오게하기 .*; 나오지않게하기 

setting이나 perference에서

 Editor > Code Style > Java >

 여기서 아래부분 Class count to use import with '*'. 9999로 변경하고

Names count to use static import with '*'. 9999로 변경한다.



————————————————————



단축키



[ option + 오류클릭] = 복사

[ control +  R ] : 실행 ( Run)

[ control + option + R ] : 소스코드 지정 실행

[ control +  D ] : 디버깅

[ control + shift + R/F10 누르고 shift누르면서 엔터] -> 선택 디버깅모드







코드 이동



[메소드/필드간 이동하기] : 아래설명에 Structure 실행 : 알트 + 7 / 맥은 ? 



[ ⌘ O ] go to Classes



[ cmd + U ] : 부모클래스 메소드로 이동(오버라이딩메소드에서)

[ option + ⌘ + B ] : 자식클래스 메소드로 이동 ( 추상메소드에서 )



[ ⌘ + ⇧ + E ] : 최근 작업한 클래스의 코드부분으로 이동



[ ⌃ + ↑/↓ ] : 매소드 사이를 이동하고 다님



[ fn +  ↑ ↓ ] : 맨위 맨아래



[ ⌃ ⌘ B ] : 구현된 메소드로 이동하기









코드정리



꿀팁!  : 커서 동시선택

0. 인텔리제이 윈도우용 꿀팁!! 맥에도 적용되는지 보기 

편집모드 변환 세로커서 편집하기 

 Alt + MouseLeftButton을 클릭하고 드래그해도되고 또 Alt + shift + 마우스왼쪽클릭 여러번하면 여려곳에 커서가지정이 된다. 

또는 Alt + Shift + Insert 로 편집모드를 변환해도된다. 

또는 Alt + J 를하면 동일한 단어에 커서가 생성된다.

0. 코드정리 단축키 -> 자기가 원하는 부분만 선택해서 보기



부모 메소드로 가기  컨트롤 + U 





[ option + command + T ] 선택된 코드 둘러싸기  (ctrl+alt+T /윈도우)





 [shift + control + J ] : 두 줄을 하나로 연결



[ command +  delete ] : 앞에 한줄  삭제

[ control +  K ] :  뒤에 한줄 삭제

[ option +  command +  Enter ] : 코드와 코드사이에 공간 생성하기



[command + ( . ) 도트 ]. :  메소드 축소





[ command + Enter ] : 아래공간 생성하기

[ ⌥ ⌘ Enter ] : 위에공간 띄우기기

[ ⌘ ⇧ Enter ] : 세미콜론 ; 찍고 줄바꿈







[ command + shift + U ] : 대소문자 변경





[ cmd  + Q ] : 관련 설명 보기 

[ ⌥ ⌘ L ] : 코드 들여쓰기 정렬 , 컨벤션 체크



[ F2 /. shift + F2 ] [ opt + ⌘  +  ↑ / ↓ ] : 오류위치 이동



변수명 바꾸기 텍스트 교체 : command + R ➞ 이거 사용할때는 체크박스 신중히 !! 

프로젝트에서 텍스트 교체 + command + shift + R

import 안쓰는거 삭제 : [ option + command + O ] 



생성

[ ⌘ N ] : ( 생성자, 게터 세터 등등) 제네레이션 실행 (alt+ 삽입)



[ ⌃ + ⌥ + O ] :  Optimize imports

[ ⌥ + Enter ] 





[ ⌘ ⇧ N ] : scratch 파일 생성

⁃ 사용 예 : 코드 선택된 상태로 누르면 해당영역이 그대로 복사 ➞ 간단한 코드 빠르게 테스트



[ opt + Enter ] : 스마트 오류 솔루션 제시



[ ⇧ ⌘ V ] :  최근 클립보드 내용을 선택하고 텍스트에 삽입







파일 이동



[ command + shift+ [  \  ]  ] : 사파리랑 동일한기능임

[ ⌃ H ] : 편집간 클래스의 상속계층 파일보기



[ ⌘  E ]  :  열었던 모든 파일을 볼 수 있음



[ ⌘ ⇧ O ] : 파일간 검색해서 이동하기 



[ ⌃ tab ] : 최근 열었던 파일로 바로가기 



[ ⌘ 1 ] 왼쪽 이동, 종료시 ESC



[ ⌘ ⇧ T ] : 테스트 메서드 생성



[ ⌘ w ] : 탭 닫기













코드작성



메소드 파라미터 보기 : cmd + P







[ ⌃ Space ] : 현재 파일에서 입력된 접두사로 시작하는 모든 단어가 검색 목록에 나타난다.



[ ⌘   P } : 필요 argument보는 법  커서가 매서드 호출의 괄호 사이에 있는 경우,를 누르면 유효한 파리미터 목록이 나타난다.



[ ⌘ D ] : 한줄 복사하기

[option D] : 코드 한줄 복사



[ ⇧ ⌘ V] 클립보드









자동완성



[psvm] : public static void main(String[] args)



[string] : String  ( Math Case ) 



[sout] : System.out.println(  );

[soutt] : System.out.print(  );

[souf] : System.out.printf();

[soutv ] :  System.out.println(“x = “ + x); 형태로 변수 출력

[ south ] : System.out.print();



[fori / forj] : for ( int i = 0 ; i < \\ ; i ++ ) { } 

[foreach]  : 향상된 for문

[itar ]: for array





















플러그인 ( Plugin )

• Presentation Assistant 플러그인에서 다운받으면 내가 쓰는 단축키가 하단에 표시된다.

•  SaveAction : 말그대로 Save할 때 Organize Import를 설정한다 든지, 인덴트나 들여씌기를 통일시켜줍니다.





기타 아직 알아내는중 

• 디버깅 - 브레이크 포인트

 브레이크포인트 마커를 마우스 오른쪽 버튼으로 클릭하면 스피드 메뉴가 호출되며, 여기서 브레이크포인트를 빠르게 활성화/비활성화하거나 해당 속성을 조정할 수 있다.



• 디버깅

프로그램을 디버깅하는 동안 표현의 값을 쉽게 평가하려면 편집기에서 해당 텍스트를 선택하고(이 작업을 효율적으로 수행하려면 ⌥↑를 몇 번 누를 수 있음) ⌥F8을 누르십시오.











설명







0. 함수내용 보기 (클래스 구조 보기) 



option + space  : 클래스 구조 보기. 클래스에하면 전체 구조가 보인다. 

















0. API도큐먼트 보기 : ctrol + J (mac) / ctrol + Q (윈도우)

또는 상속받고 컨트롤 + U로 부모클래스로 들어가봐도 좋다. 자식클래스로 가는법은

  











0. 부모 메소드 / 자식 메소드 바로가기 

⁃ 부모메소드 가기 : command + U (맥)  / control + U (윈도우) 

⁃ 자식 클래스의 목록 팝업 option + command + B / ctrl + alt + B















0. 코드 분석 및 설계 하기. 코드가 길어질경우, 상속을 그림으로 볼 수있다.



다이어그램 : https://blog.woniper.net/291  정리 블로그











0. 클래스 이름 ( Class Name ) 변경 : [shift + F6 ] 

⁃ 앵간해서는 그냥 Refactor 누르시면 됩니다.

다만 

Search for text occurrences  

Search in comments and strings 

이 두가지는

주석이나 String 문자열에 "Dto" 라는 글자가 포함되어있는경우 그것도 포함해서 같이 바꾸겠냐는 이야기 입니다.



원하지 않으신다면 체크박스에서 해제하시면 됩니다.

해제하지 않는 경우 '어차피' Refactor Preview 로 창이 하나 아래에 생성되게 되는데,

거기서 text occurrences 그룹을 삭제해버리는 방법도 있습니다.



결론적으로 그냥 이름 바꾸고 Refactor Preview 에서 내보내는 리스트만 주의하고 Do Refactor 버튼 딱 눌러주면 알아서 착착 바뀝니다.



0. 메소드, 변수, 인터페이스 필드, 제네릭 등 목록보기 상단 View -> Tool Windows -> Structure -> command + 7 (mac) / Alt + 7 (윈도우)

열쇠모양은 protected를 의미한다. 

native는 C/C++등 네이티브 언어로 작성된 구현체에 위임한다는 뜻이다.



















0. 클래스 계층관계 따져보기 



Type hierarchy 보기 ( 오라클 클래스 수업보기 https://docs.oracle.com/javase/10/docs/api/java/lang/System.html#out    )ㅣ



객체지향 언어의 구조를 파악하는데 소스부터 파보는 건 개인적으로 별로 추천드리고 싶지 않습니다. 클래스 기반 객체지향 언어라면 다른 무엇보다 클래스의 계층 관계를 따져보는 것만으로도 대략 해당 클래스가 어떤 역할을 하는지 짐작할 수 있습니다.

어딘가 모르는 지역을 찾아간다고 했을 때, API를 보고 계층구조부터 따라 내려가는 건 지도를 보고 크게 어느 시군구에 있고 어느 지하철역에 가깝고 그런 식으로 접근하는 것이고, 소스부터 파보는 건 무작정 해당 지역의 거리 뷰부터 띄워 놓고 주변 건물부터 외우는 거나 비슷합니다.





Ctrl + H Type : hierarchy

Ctrl + Shift + H : Method hierarchy

Ctrl + Alt + H : Call hierarchy



native라고 적혀진것은 추상메소드가 아니라, 

아시다시피 추상 메서드는 'abstract' 주제어로 식별하게 되어있고, 'native'는 자바가 아닌 C/C++ 등 네이티브 언어로 작성된 구현체에 위임한다는 뜻입니다.













0. 파일 다른 폴더로 이동 



F7 : 현재 file 다른 디렉토리로 move(이동시키기) 















0. 필요 argument보는 법



command + P  : argument 보기











0. 매소드 구조( 매소드 목록) 보기 



command + 7  / 마우스로 왼쪽 structure 클릭 : 매소드 구조 보기



control + option + H : 메소드 계층 구조 보기 ( 이거는 잘 모르겠음. 구조파악이 아직 안되나봄 )





option + space : 매소드 (함수) 내용 보기 ( 자주사용 ) 


command + N : 자동생성

출처 : https://okky.kr/article/605046



